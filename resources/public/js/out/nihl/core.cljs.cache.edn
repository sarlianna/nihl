;; Analyzed by ClojureScript 1.7.228
{:use-macros {go cljs.core.async.macros, go-loop cljs.core.async.macros}, :excludes #{}, :name nihl.core, :imports nil, :requires {cljsjs.react cljsjs.react, sab sablono.core, sablono.core sablono.core, cljs.core.async cljs.core.async}, :uses {timeout cljs.core.async, <! cljs.core.async, close! cljs.core.async, chan cljs.core.async, sliding-buffer cljs.core.async, put! cljs.core.async}, :defs {jump-vel {:name nihl.core/jump-vel, :file "/usr/src/nihl/src/nihl/core.cljs", :line 14, :column 1, :end-line 14, :end-column 14, :meta {:file "/usr/src/nihl/src/nihl/core.cljs", :line 14, :column 6, :end-line 14, :end-column 14}}, floor {:protocol-inline nil, :meta {:file "/usr/src/nihl/src/nihl/core.cljs", :line 11, :column 7, :end-line 11, :end-column 12, :arglists (quote ([x]))}, :name nihl.core/floor, :variadic false, :file "/usr/src/nihl/src/nihl/core.cljs", :end-column 12, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, jump {:protocol-inline nil, :meta {:file "/usr/src/nihl/src/nihl/core.cljs", :line 86, :column 7, :end-line 86, :end-column 11, :arglists (quote ([{:keys [x-vel y-vel midair?], :as st}]))}, :name nihl.core/jump, :variadic false, :file "/usr/src/nihl/src/nihl/core.cljs", :end-column 11, :method-params ([p__23271]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 86, :end-line 86, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [x-vel y-vel midair?], :as st}]))}, update-world {:protocol-inline nil, :meta {:file "/usr/src/nihl/src/nihl/core.cljs", :line 78, :column 7, :end-line 78, :end-column 19, :arglists (quote ([state]))}, :name nihl.core/update-world, :variadic false, :file "/usr/src/nihl/src/nihl/core.cljs", :end-column 19, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 78, :end-line 78, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, new-enemy {:protocol-inline nil, :meta {:file "/usr/src/nihl/src/nihl/core.cljs", :line 69, :column 7, :end-line 69, :end-column 16, :arglists (quote ([state]))}, :name nihl.core/new-enemy, :variadic false, :file "/usr/src/nihl/src/nihl/core.cljs", :end-column 16, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, hit-floor? {:protocol-inline nil, :meta {:file "/usr/src/nihl/src/nihl/core.cljs", :line 62, :column 7, :end-line 62, :end-column 17, :arglists (quote ([{:keys [y]}]))}, :name nihl.core/hit-floor?, :variadic false, :file "/usr/src/nihl/src/nihl/core.cljs", :end-column 17, :method-params ([p__23261]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 62, :end-line 62, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [y]}]))}, starting-state {:name nihl.core/starting-state, :file "/usr/src/nihl/src/nihl/core.cljs", :line 25, :column 1, :end-line 25, :end-column 20, :meta {:file "/usr/src/nihl/src/nihl/core.cljs", :line 25, :column 6, :end-line 25, :end-column 20}}, floor-y {:name nihl.core/floor-y, :file "/usr/src/nihl/src/nihl/core.cljs", :line 15, :column 1, :end-line 15, :end-column 13, :meta {:file "/usr/src/nihl/src/nihl/core.cljs", :line 15, :column 6, :end-line 15, :end-column 13}}, player-height {:name nihl.core/player-height, :file "/usr/src/nihl/src/nihl/core.cljs", :line 16, :column 1, :end-line 16, :end-column 19, :meta {:file "/usr/src/nihl/src/nihl/core.cljs", :line 16, :column 6, :end-line 16, :end-column 19}}, game-over? {:protocol-inline nil, :meta {:file "/usr/src/nihl/src/nihl/core.cljs", :line 67, :column 7, :end-line 67, :end-column 17, :arglists (quote ([state]))}, :name nihl.core/game-over?, :variadic false, :file "/usr/src/nihl/src/nihl/core.cljs", :end-column 17, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 67, :end-line 67, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, player-width {:name nihl.core/player-width, :file "/usr/src/nihl/src/nihl/core.cljs", :line 17, :column 1, :end-line 17, :end-column 18, :meta {:file "/usr/src/nihl/src/nihl/core.cljs", :line 17, :column 6, :end-line 17, :end-column 18}}, px {:protocol-inline nil, :meta {:file "/usr/src/nihl/src/nihl/core.cljs", :line 117, :column 7, :end-line 117, :end-column 9, :arglists (quote ([n]))}, :name nihl.core/px, :variadic false, :file "/usr/src/nihl/src/nihl/core.cljs", :end-column 9, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 117, :end-line 117, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n]))}, update-enemies {:protocol-inline nil, :meta {:file "/usr/src/nihl/src/nihl/core.cljs", :line 71, :column 7, :end-line 71, :end-column 21, :arglists (quote ([state]))}, :name nihl.core/update-enemies, :variadic false, :file "/usr/src/nihl/src/nihl/core.cljs", :end-column 21, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 71, :end-line 71, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, enemy-width {:name nihl.core/enemy-width, :file "/usr/src/nihl/src/nihl/core.cljs", :line 20, :column 1, :end-line 20, :end-column 17, :meta {:file "/usr/src/nihl/src/nihl/core.cljs", :line 20, :column 6, :end-line 20, :end-column 17}}, update-ui {:protocol-inline nil, :meta {:file "/usr/src/nihl/src/nihl/core.cljs", :line 76, :column 7, :end-line 76, :end-column 16, :arglists (quote ([state]))}, :name nihl.core/update-ui, :variadic false, :file "/usr/src/nihl/src/nihl/core.cljs", :end-column 16, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 76, :end-line 76, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, gravity {:name nihl.core/gravity, :file "/usr/src/nihl/src/nihl/core.cljs", :line 13, :column 1, :end-line 13, :end-column 13, :meta {:file "/usr/src/nihl/src/nihl/core.cljs", :line 13, :column 6, :end-line 13, :end-column 13}}, game-state {:name nihl.core/game-state, :file "/usr/src/nihl/src/nihl/core.cljs", :line 58, :column 1, :end-line 58, :end-column 20, :meta {:file "/usr/src/nihl/src/nihl/core.cljs", :line 58, :column 10, :end-line 58, :end-column 20}}, collision? {:protocol-inline nil, :meta {:file "/usr/src/nihl/src/nihl/core.cljs", :line 65, :column 7, :end-line 65, :end-column 17, :arglists (quote ([state]))}, :name nihl.core/collision?, :variadic false, :file "/usr/src/nihl/src/nihl/core.cljs", :end-column 17, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 65, :end-line 65, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, time-loop {:protocol-inline nil, :meta {:file "/usr/src/nihl/src/nihl/core.cljs", :line 103, :column 7, :end-line 103, :end-column 16, :arglists (quote ([time]))}, :name nihl.core/time-loop, :variadic false, :file "/usr/src/nihl/src/nihl/core.cljs", :end-column 16, :method-params ([time]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 103, :end-line 103, :max-fixed-arity 1, :fn-var true, :arglists (quote ([time]))}, start-game {:protocol-inline nil, :meta {:file "/usr/src/nihl/src/nihl/core.cljs", :line 110, :column 7, :end-line 110, :end-column 17, :arglists (quote ([]))}, :name nihl.core/start-game, :variadic false, :file "/usr/src/nihl/src/nihl/core.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 110, :end-line 110, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, renderer {:protocol-inline nil, :meta {:file "/usr/src/nihl/src/nihl/core.cljs", :line 132, :column 9, :end-line 132, :end-column 17, :arglists (quote ([full-state]))}, :name nihl.core/renderer, :variadic false, :file "/usr/src/nihl/src/nihl/core.cljs", :end-column 17, :method-params ([full-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 132, :end-line 132, :max-fixed-arity 1, :fn-var true, :arglists (quote ([full-state]))}, enemy-height {:name nihl.core/enemy-height, :file "/usr/src/nihl/src/nihl/core.cljs", :line 21, :column 1, :end-line 21, :end-column 18, :meta {:file "/usr/src/nihl/src/nihl/core.cljs", :line 21, :column 6, :end-line 21, :end-column 18}}, update-player {:protocol-inline nil, :meta {:file "/usr/src/nihl/src/nihl/core.cljs", :line 73, :column 7, :end-line 73, :end-column 20, :arglists (quote ([{:keys [time-delta x y x-vel y-vel], :as st}]))}, :name nihl.core/update-player, :variadic false, :file "/usr/src/nihl/src/nihl/core.cljs", :end-column 20, :method-params ([p__23266]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [time-delta x y x-vel y-vel], :as st}]))}, render-world {:protocol-inline nil, :meta {:file "/usr/src/nihl/src/nihl/core.cljs", :line 99, :column 7, :end-line 99, :end-column 19, :arglists (quote ([state]))}, :name nihl.core/render-world, :variadic false, :file "/usr/src/nihl/src/nihl/core.cljs", :end-column 19, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 99, :end-line 99, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, main-template {:protocol-inline nil, :meta {:file "/usr/src/nihl/src/nihl/core.cljs", :line 119, :column 7, :end-line 119, :end-column 20, :arglists (quote ([{:keys [game-started? health border-pos x y]}]))}, :name nihl.core/main-template, :variadic false, :file "/usr/src/nihl/src/nihl/core.cljs", :end-column 20, :method-params ([p__23313]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 119, :end-line 119, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [game-started? health border-pos x y]}]))}, translate {:protocol-inline nil, :meta {:file "/usr/src/nihl/src/nihl/core.cljs", :line 92, :column 7, :end-line 92, :end-column 16, :arglists (quote ([start-pos vel time]))}, :name nihl.core/translate, :variadic false, :file "/usr/src/nihl/src/nihl/core.cljs", :end-column 16, :method-params ([start-pos vel time]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 92, :end-line 92, :max-fixed-arity 3, :fn-var true, :arglists (quote ([start-pos vel time]))}, reset-state {:protocol-inline nil, :meta {:file "/usr/src/nihl/src/nihl/core.cljs", :line 52, :column 7, :end-line 52, :end-column 18, :arglists (quote ([_ cur-time]))}, :name nihl.core/reset-state, :variadic false, :file "/usr/src/nihl/src/nihl/core.cljs", :end-column 18, :method-params ([_ cur-time]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 2, :fn-var true, :arglists (quote ([_ cur-time]))}, check-input {:protocol-inline nil, :meta {:file "/usr/src/nihl/src/nihl/core.cljs", :line 88, :column 7, :end-line 88, :end-column 18, :arglists (quote ([event]))}, :name nihl.core/check-input, :variadic false, :file "/usr/src/nihl/src/nihl/core.cljs", :end-column 18, :method-params ([event]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 88, :end-line 88, :max-fixed-arity 1, :fn-var true, :arglists (quote ([event]))}, in-enemy? {:protocol-inline nil, :meta {:file "/usr/src/nihl/src/nihl/core.cljs", :line 60, :column 7, :end-line 60, :end-column 16, :arglists (quote ([]))}, :name nihl.core/in-enemy?, :variadic false, :file "/usr/src/nihl/src/nihl/core.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 60, :end-line 60, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, render-border {:protocol-inline nil, :meta {:file "/usr/src/nihl/src/nihl/core.cljs", :line 95, :column 7, :end-line 95, :end-column 20, :arglists (quote ([{:keys [cur-time x-vel], :as state}]))}, :name nihl.core/render-border, :variadic false, :file "/usr/src/nihl/src/nihl/core.cljs", :end-column 20, :method-params ([p__23276]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 95, :end-line 95, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [cur-time x-vel], :as state}]))}}, :require-macros {cljs.core.async.macros cljs.core.async.macros, sab sablono.core, sablono.core sablono.core}, :cljs.analyzer/constants {:seen #{:y :game-started? :time-delta :else :y-vel :a.start-button :name :exp :start-time :recur :type :midair? :renderer :level :attacking? :worth :class :cur-time :health :x :item-list :enemy-list :timer-running? :x-vel :attack :border-pos :onClick :span}, :order [:y :game-started? :y-vel :exp :start-time :midair? :level :attacking? :cur-time :health :x :item-list :enemy-list :timer-running? :x-vel :attack :name :type :worth :time-delta :border-pos :recur :else :class :a.start-button :onClick :span :renderer]}, :doc nil}